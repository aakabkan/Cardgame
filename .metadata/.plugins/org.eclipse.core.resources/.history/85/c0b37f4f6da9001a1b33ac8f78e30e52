package com.cardgame.cardgame;

import java.util.ArrayList;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ui.ModelMap;

@Service
public class GameService {
	@Autowired
	private GameSetup gameSetup;
	@Autowired
	private CardInfoService cardInfoService;
	@Autowired
	private PlayerService playerService;

	private int nPlayers;
	private ModelMap model;
	private final static int STARTING_HAND = 4;
	private final static int MAX_HAND = 6;
	private Player[] players;
	
	public String updateBoard(ModelMap model, int cardNumber) {//is called after each round. 
		this.model = model;
		nPlayers = gameSetup.getnPlayers();
    	model.put("nPlayers", nPlayers);
    	setPlayerArray();
    	if (players[0].getCard(cardNumber)!=CardType.EMPTY) {
	    	doPlayersTurns(cardNumber);
    	}
    	updateModel();
    	return "board";
    }

	public void setPlayerArray() {
		players = new Player[nPlayers];
		for (int playerNumber=0; playerNumber<nPlayers; playerNumber++) {
			players[playerNumber] = (Player)playerService.findById("Player "+ playerNumber).get();
		}
	}

	private void doPlayersTurns(int cardNumber) { 
		for (int playerNumber=0; playerNumber<nPlayers; playerNumber++) {//looping through all the players
//			ArrayList<Integer> playedCardNumbers = new ArrayList<Integer>();//contains the cards already played
			for (int nPlayedCards=0;nPlayedCards<players[playerNumber].getPlay();nPlayedCards++) {//needs if player should play more cards 
				if (playerNumber>0) {//computer's move
//					cardNumber = chooseComputersCard(playerNumber,playedCardNumbers);
					cardNumber = chooseComputersCard(playerNumber, new ArrayList());
				}
//		    	cardNumber = playOrChooseAnotherCard(playerNumber, cardNumber, playedCardNumbers);
		    	cardNumber = playOrChooseAnotherCard(playerNumber, cardNumber);
		    	if (cardNumber==-1) {//player needs to choose a new card here
		    		if (playerNumber==0 && checkIfAnyCardCouldBePlayed(playerNumber)) {
			    		return;		    			
		    		} //if no card can be played, take -30 points instead of playing a card and discard hand
		    		playerService.save(new Player("Player "+ playerNumber,players[playerNumber].getScore()-30,players[playerNumber].getDraw(),players[playerNumber].getPlay(),players[playerNumber].getCard1(),players[playerNumber].getCard2(),players[playerNumber].getCard3(),players[playerNumber].getCard4(),players[playerNumber].getCard5(),players[playerNumber].getCard6(),players[playerNumber].getHasPlayed()));
					gameSetup.discardHand(playerNumber);						
		    		break;
		    	}
		    	nPlayedCards+=players[playerNumber].getHasPlayed();
//			   	playedCardNumbers = updateListOfPlayedCards(playerNumber,cardNumber,playedCardNumbers);
			   	updateListOfPlayedCards(playerNumber,cardNumber);
			   	if (checkIfYouNeedToPlayMoreCards(playerNumber,nPlayedCards,cardNumber)) {//if so, other player shouldn't do anything
			   		return;
			   	}
			}
			drawNewCards(playerNumber);
		}
	}

//	private ArrayList<Integer> updateListOfPlayedCards(int playerNumber, int cardNumber, ArrayList<Integer> playedCardNumbers) {
//	   	if (players[playerNumber].getCard(cardNumber)==CardType.TAKE_MINUS_POINTS_AND_DISCARD_HAND) {
//	   		playedCardNumbers = new ArrayList<Integer>();
//	   	}
//	   	else if (players[playerNumber].getCard(cardNumber)!=CardType.DECREASE_HAND_LIMIT) {
//	   		playedCardNumbers.add(cardNumber);
//			gameSetup.updateCardsInResultList(cardNumber, playerNumber, CardType.EMPTY);
//	   	}
//	   	return playedCardNumbers;
//	}

	private void updateListOfPlayedCards(int playerNumber, int cardNumber) {
		CardType cardType = players[playerNumber].getCard(cardNumber);
	   	if (cardType!=CardType.DECREASE_HAND_LIMIT && cardType!=CardType.TAKE_MINUS_POINTS_AND_DISCARD_HAND) {
			gameSetup.updateCardsInResultList(cardNumber, playerNumber, CardType.EMPTY);
	   	}
	}

	private boolean checkIfYouNeedToPlayMoreCards(int playerNumber, int nPlayedCards, int cardNumber) {
    	if (playerNumber==0) {
	    	if (nPlayedCards<players[playerNumber].getPlay()-1) {//if it's you and you need to play another card
		    	playerService.save(new Player("Player "+ playerNumber,players[playerNumber].getScore(),players[playerNumber].getDraw(),players[playerNumber].getPlay(),players[playerNumber].getCard1(),players[playerNumber].getCard2(),players[playerNumber].getCard3(),players[playerNumber].getCard4(),players[playerNumber].getCard5(),players[playerNumber].getCard6(),players[playerNumber].getHasPlayed()+1));
//			   	if (players[playerNumber].getCard(cardNumber)!=CardType.DECREASE_HAND_LIMIT && players[playerNumber].getCard(cardNumber)!=CardType.TAKE_MINUS_POINTS_AND_DISCARD_HAND) {
//			    	gameSetup.updateCardsInResultList(cardNumber, playerNumber, CardType.EMPTY);
//			   	}
//    	updateModel();
	    		return true;
	    	}
	    	else {
		    	playerService.save(new Player("Player "+ playerNumber,players[playerNumber].getScore(),players[playerNumber].getDraw(),players[playerNumber].getPlay(),players[playerNumber].getCard1(),players[playerNumber].getCard2(),players[playerNumber].getCard3(),players[playerNumber].getCard4(),players[playerNumber].getCard5(),players[playerNumber].getCard6(),0));
	    	}
    	}
		return false;
	}

	private void drawNewCards(int playerNumber) {
		for (int cardNumber=1;cardNumber<=players[playerNumber].getDraw();cardNumber++) {//draw new cards for all that have been played
			if (players[playerNumber].getCard(cardNumber)==CardType.EMPTY) {
				gameSetup.randomizeCard(cardNumber,playerNumber);
			}
		}
	}

	private boolean checkIfAnyCardCouldBePlayed(int playerNumber) {
		for (int cardIndex=1;cardIndex<=players[playerNumber].getDraw();cardIndex++) {
			if (checkIfCardCanBePlayed(playerNumber, cardIndex, false)) {
				return true;
			}
		}
		return false;
	}

	private void updateModel() {
		for (int playerNumber=1; playerNumber<=nPlayers; playerNumber++) {
			if (playerNumber==1) {
				for (int cardIndex=1;cardIndex<=players[playerNumber-1].getDraw();cardIndex++) {
					try {
						model.put("description"+cardIndex, cardInfoService.findById(players[playerNumber-1].getCard(cardIndex)).get().getDescription());
					}
					catch(Exception e) {// if cardType==CardType.EMPTY
						model.put("description"+cardIndex, "");				
					}
				}
			}
	    	model.put("score"+playerNumber, players[playerNumber-1].getScore());
	    	model.put("draw"+playerNumber, players[playerNumber-1].getDraw());
	    	model.put("play"+playerNumber, players[playerNumber-1].getPlay());
		}
	}

//	private int playOrChooseAnotherCard(int playerNumber, int cardNumber, ArrayList<Integer> forbiddenCards) {//returns negative if no card has been played
	private int playOrChooseAnotherCard(int playerNumber, int cardNumber) {//returns negative if no card has been played
		ArrayList<Integer> forbiddenCards = new ArrayList<Integer>();
		int nTimesInLoop=0;
		while (!checkIfCardCanBePlayed(playerNumber, cardNumber, true) && nTimesInLoop<players[playerNumber].getDraw()) {
			if (playerNumber==0) {
				model.put("error", "Card could not be played. Choose another card");
				return -1;
			}
			forbiddenCards.add(cardNumber);
			cardNumber = chooseComputersCard(playerNumber,forbiddenCards);
			nTimesInLoop++;
		}
		return nTimesInLoop==players[playerNumber].getDraw() ? -1 : cardNumber;
	}

	private int chooseComputersCard(int playerNumber, ArrayList<Integer> forbiddenCards) {
		int cardNumber=1;
		while (forbiddenCards.contains(cardNumber)) {
			cardNumber++;
		}
		for (int i=cardNumber+1;i<=players[playerNumber].getDraw();i++) {
			cardNumber = players[playerNumber].getCard(i).ordinal()<players[playerNumber].getCard(cardNumber).ordinal() && !forbiddenCards.contains(i) && players[playerNumber].getCard(i).ordinal()>0? i : cardNumber; 
		}
		return cardNumber<=players[playerNumber].getDraw() ? cardNumber : -1;
	}

	private boolean checkIfCardCanBePlayed(int playerNumber, int cardNumber, boolean shouldBePlayed) {//returns if it is playable
	   	CardType cardType = players[playerNumber].getCard(cardNumber);
   		while (cardType==CardType.PLAY_TOPMOST_CARD && shouldBePlayed) {//randomize a new card here
    		cardType = playTopmostCard(cardNumber, playerNumber);
    	}
    	if (cardType==CardType.TAKE_MINUS_POINTS || cardType==CardType.TAKE_MINUS_POINTS_AND_DISCARD_HAND && shouldBePlayed) {
    		takeMinusPoints(playerNumber,cardType);
    	}
    	else if (cardType==CardType.INCREASE_PLAYED_CARDS_AND_SCORE) {
    		return increasePlayedCards(playerNumber,shouldBePlayed);
    	}
    	else if (cardType==CardType.INCREASE_HAND_LIMIT_FOR_OPPONENT) {
    		return increaseHandLimitForAnOpponent(playerNumber,MAX_HAND,shouldBePlayed);
    	}
    	else if (cardType==CardType.GIVE_OPPONENT_SCORE && shouldBePlayed) {
    		giveOpponentScore(playerNumber);
    	}
    	else if (cardType==CardType.REMOVE_CURSE_FROM_OPPONENT) {
    		return removeCurseFromOpponent(playerNumber,shouldBePlayed);
    	}
    	else if (cardType==CardType.DECREASE_HAND_LIMIT) {
    		return decreaseHandLimit(playerNumber,cardNumber, shouldBePlayed);
    	}
    	else if (cardType==CardType.SWITCH_SCORE_WITH_OPPONENT) {
    		return switchScoreWithOpponent(playerNumber,shouldBePlayed);
    	}
       	return cardType!=CardType.EMPTY;
	}

	private void takeMinusPoints(int playerNumber, CardType cardType) {
		CardInfo card = cardInfoService.findById(cardType).get();
		playerService.save(new Player("Player "+ playerNumber,players[playerNumber].getScore()+card.getScore(),players[playerNumber].getDraw(),players[playerNumber].getPlay(),players[playerNumber].getCard1(),players[playerNumber].getCard2(),players[playerNumber].getCard3(),players[playerNumber].getCard4(),players[playerNumber].getCard5(),players[playerNumber].getCard6(),players[playerNumber].getHasPlayed()));
		if (cardType==CardType.TAKE_MINUS_POINTS_AND_DISCARD_HAND) { 
			gameSetup.discardHand(playerNumber);						
		}
	}

	private CardType playTopmostCard(int cardNumber, int playerNumber) {
		gameSetup.randomizeCard(cardNumber, playerNumber);
	  	return players[playerNumber].getCard(cardNumber);
	}

	private boolean increasePlayedCards(int playerNumber, boolean shouldBePlayed) {
		if (players[playerNumber].getPlay()>=MAX_HAND) {
			return false;
		}
		if (shouldBePlayed) {
			CardInfo card = cardInfoService.findById(CardType.INCREASE_PLAYED_CARDS_AND_SCORE).get();
			int addDraw = players[playerNumber].getPlay()==players[playerNumber].getDraw() ? 1 : 0;
			playerService.save(new Player("Player "+ playerNumber,players[playerNumber].getScore()+card.getScore(),players[playerNumber].getDraw()+addDraw,players[playerNumber].getPlay()+1,players[playerNumber].getCard1(),players[playerNumber].getCard2(),players[playerNumber].getCard3(),players[playerNumber].getCard4(),players[playerNumber].getCard5(),players[playerNumber].getCard6(),players[playerNumber].getHasPlayed()));
		}
		return true;
	}

	private boolean decreaseHandLimit(int playerNumber, int cardNumber, boolean shouldBePlayed) {
		if (players[playerNumber].getDraw()<=players[playerNumber].getPlay()) {
			return false;
		}
		if (shouldBePlayed) {
			playerService.save(new Player("Player "+ playerNumber,players[playerNumber].getScore(),players[playerNumber].getDraw()-1,players[playerNumber].getPlay(),players[playerNumber].getCard1(),players[playerNumber].getCard2(),players[playerNumber].getCard3(),players[playerNumber].getCard4(),players[playerNumber].getCard5(),players[playerNumber].getCard6(),players[playerNumber].getHasPlayed()));
			gameSetup.repositionCards(playerNumber, cardNumber);
		}
		return true;
	}

	private boolean increaseHandLimitForAnOpponent(int playerNumber, int maxLimit, boolean shouldBePlayed){
		int playOnId = findWhichPlayerToPlayOn(playerNumber,false,maxLimit);
		if(playOnId==-1) {//card can not be played then
			return false;
		}
		if (shouldBePlayed) {
			playerService.save(new Player("Player "+ playOnId,players[playOnId].getScore(),players[playOnId].getDraw()+1,players[playOnId].getPlay(),players[playOnId].getCard1(),players[playOnId].getCard2(),players[playOnId].getCard3(),players[playOnId].getCard4(),players[playOnId].getCard5(),players[playOnId].getCard6(),players[playOnId].getHasPlayed()));
			gameSetup.randomizeCard(players[playOnId].getDraw(),playOnId);
		}
		return true;
    }

    private void giveOpponentScore(int playerNumber) {
    	int playOnId = findWhichPlayerToPlayOn(playerNumber,false,MAX_HAND+1);
		playerService.save(new Player("Player "+ playOnId,players[playOnId].getScore()+20,players[playOnId].getDraw(),players[playOnId].getPlay(),players[playOnId].getCard1(),players[playOnId].getCard2(),players[playOnId].getCard3(),players[playOnId].getCard4(),players[playOnId].getCard5(),players[playOnId].getCard6(),players[playOnId].getHasPlayed()));
	}

	private boolean removeCurseFromOpponent(int playerNumber, boolean shouldBePlayed) {
		if (increaseHandLimitForAnOpponent(playerNumber, STARTING_HAND, shouldBePlayed)) {
			return true;
		}
		return decreaseNPlayedCardsForAnOpponent(playerNumber, shouldBePlayed);
	}

	private boolean decreaseNPlayedCardsForAnOpponent(int playerNumber, boolean shouldBePlayed) {//chooses the player who already plays most cards
		int playOnId = findWhichPlayerToPlayOn(playerNumber,true,MAX_HAND+1);
		if(playOnId==-1) {//card can not be played then
			return false;
		}
		if (shouldBePlayed) {
			playerService.save(new Player("Player "+ playOnId,players[playOnId].getScore(),players[playOnId].getDraw(),players[playOnId].getPlay()-1,players[playOnId].getCard1(),players[playOnId].getCard2(),players[playOnId].getCard3(),players[playOnId].getCard4(),players[playOnId].getCard5(),players[playOnId].getCard6(),players[playOnId].getHasPlayed()));
			gameSetup.randomizeCard(players[playOnId].getDraw(),playOnId);
		}
		return true;
	}

	private int findWhichPlayerToPlayOn(int playerNumber, boolean decreasePlayed, int maxLimit) {//chooses the player with lowest score possible to play on
		int playOnId=-1; //which player should be chosen
		int playOnIdsScore=10000; //score for that player
		for (int opponent=0;opponent<nPlayers;opponent++) {
			if (opponent!=playerNumber) {
				int opponentsScore = (int)players[opponent].getScore();//score for the player in the loop
				if (opponentsScore<playOnIdsScore && (int)players[opponent].getDraw()<maxLimit && (!decreasePlayed || (int)players[opponent].getPlay()>1)) {
					playOnId = opponent;
					playOnIdsScore = opponentsScore; 
				}
			}
		}
		return playOnId;
	}

	private boolean switchScoreWithOpponent(int playerNumber, boolean shouldBePlayed) {//chooses the player with highest score, lower than yourself
		int switchWithId=-1; //which player should be chosen
		int switchWithIdsScore=-10000; //score for that player
		int playersScore = players[playerNumber].getScore();//score for the player that played the card
		for (int opponent=0;opponent<nPlayers;opponent++) {
			if (opponent!=playerNumber) {
				int opponentsScore = (int)players[opponent].getScore();//score for the player in the loop
				if (opponentsScore>switchWithIdsScore && opponentsScore<playersScore) {
					switchWithId = opponent;
					switchWithIdsScore = opponentsScore; 
				}
			}
		}
		if(switchWithId==-1) {//card can not be played then
			return false;
		}
		if (shouldBePlayed) {
			playerService.save(new Player("Player "+ switchWithId,playersScore,players[switchWithId].getDraw(),players[switchWithId].getPlay(),players[switchWithId].getCard1(),players[switchWithId].getCard2(),players[switchWithId].getCard3(),players[switchWithId].getCard4(),players[switchWithId].getCard5(),players[switchWithId].getCard6(),players[switchWithId].getHasPlayed()));
			playerService.save(new Player("Player "+ playerNumber,switchWithIdsScore,players[playerNumber].getDraw(),players[playerNumber].getPlay(),players[playerNumber].getCard1(),players[playerNumber].getCard2(),players[playerNumber].getCard3(),players[playerNumber].getCard4(),players[playerNumber].getCard5(),players[playerNumber].getCard6(),players[playerNumber].getHasPlayed()));
		}
		return true;
	}
}