package com.cardgame.cardgame;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ui.ModelMap;

@Service
public class GameSetup {
	@Autowired
	private CardInitializer cardInitializer;
	@Autowired
	private CardService cardService;
	@Autowired
	private CardInfoService cardInfoService;
	@Autowired
	private PlayerService playerService;

	private int nPlayers;
	private boolean gameCreated=false;
	private ModelMap model;
	private Player[] players;

	public void createGame(ModelMap model, String strNPlayers){
		this.model = model;
		int nPlayers = Integer.parseInt(strNPlayers);
		model.put("nPlayers", nPlayers);
		setPlayerArray();
		this.nPlayers = nPlayers;
		if (!gameCreated) {
			cardInitializer.createCards();
		}
		else {
			cardInitializer.prepareForNewGame();
		}
		for (int playerNumber=0;playerNumber<nPlayers;playerNumber++) {
			createPlayer(playerNumber);
		}
	}	
	
	private void createPlayer(int playerNumber) {
		Player player = new Player("Player "+playerNumber);
		playerService.save(player);
		randomizeCard(1, playerNumber);
		randomizeCard(2, playerNumber);
		randomizeCard(3, playerNumber);
		randomizeCard(4, playerNumber);
		playerNumber++;//since the indexes in the model is +1 for all
		model.put("score"+playerNumber, 0);
		model.put("draw"+playerNumber, 4);
		model.put("play"+playerNumber, 1);
	}

	public void randomizeCard(int cardNumber, int playerNumber){
		int cardId = (int) Math.ceil(cardInitializer.getTotalNCards()*Math.random());
		Card card;
		try {
			card = checkIfCardIsAlreadyTaken(cardId);
		}
		catch (NullPointerException e) {
			return;
		}
		cardService.save(new Card(cardId,card.getCardId(),true));
		updateCardsInResultList(cardNumber, playerNumber, card);
	}

	private Card checkIfCardIsAlreadyTaken(int cardId) { //If so chooses another if any remains
		Card card = (Card)cardService.findById(cardId).get();
		int firstCardId = cardId;
		while (card.isTaken()) {
			cardId=(cardId%cardInitializer.getTotalNCards())+1;
			if(cardId==firstCardId) {
				model.put("ended", true);
				return null;
			}
			card = (Card)cardService.findById(cardId).get();
		}
		return card;
	}

	private void updateCardsInResultList(int cardNumber, int playerNumber, Card card) {
		if (cardNumber==1) {
			playerService.save(new Player(players[playerNumber].getName(),players[playerNumber].getScore(),players[playerNumber].getDraw(),players[playerNumber].getPlay(),card.getCardId(),players[playerNumber].getCard2(),players[playerNumber].getCard3(),players[playerNumber].getCard4(),players[playerNumber].getCard5(),players[playerNumber].getCard6(),players[playerNumber].getHasPlayed()));			
		}
		else if (cardNumber==2) {
			playerService.save(new Player(players[playerNumber].getName(),players[playerNumber].getScore(),players[playerNumber].getDraw(),players[playerNumber].getPlay(),players[playerNumber].getCard1(),card.getCardId(),players[playerNumber].getCard3(),players[playerNumber].getCard4(),players[playerNumber].getCard5(),players[playerNumber].getCard6(),players[playerNumber].getHasPlayed()));			
		}
		else if (cardNumber==3) {
			playerService.save(new Player(players[playerNumber].getName(),players[playerNumber].getScore(),players[playerNumber].getDraw(),players[playerNumber].getPlay(),players[playerNumber].getCard1(),players[playerNumber].getCard2(),card.getCardId(),players[playerNumber].getCard4(),players[playerNumber].getCard5(),players[playerNumber].getCard6(),players[playerNumber].getHasPlayed()));			
		}
		else if (cardNumber==4) {
			playerService.save(new Player(players[playerNumber].getName(),players[playerNumber].getScore(),players[playerNumber].getDraw(),players[playerNumber].getPlay(),players[playerNumber].getCard1(),players[playerNumber].getCard2(),players[playerNumber].getCard3(),card.getCardId(),players[playerNumber].getCard5(),players[playerNumber].getCard6(),players[playerNumber].getHasPlayed()));
		}
		else if (cardNumber==5) {
			playerService.save(new Player(players[playerNumber].getName(),players[playerNumber].getScore(),players[playerNumber].getDraw(),players[playerNumber].getPlay(),players[playerNumber].getCard1(),players[playerNumber].getCard2(),players[playerNumber].getCard3(),players[playerNumber].getCard4(),card.getCardId(),players[playerNumber].getCard6(),players[playerNumber].getHasPlayed()));			
		}
		else if (cardNumber==6) {
			playerService.save(new Player(players[playerNumber].getName(),players[playerNumber].getScore(),players[playerNumber].getDraw(),players[playerNumber].getPlay(),players[playerNumber].getCard1(),players[playerNumber].getCard2(),players[playerNumber].getCard3(),players[playerNumber].getCard4(),players[playerNumber].getCard5(),card.getCardId(),players[playerNumber].getHasPlayed()));			
		}
		if (playerNumber==0) {
			model.put("description" + cardNumber, cardInfoService.findById(card.getCardId()).get().getDescription());
		}		
	}

	public void drawNewCard(int playerNumber, CardType cardType, int cardNumber) {
    	if (cardType==CardType.TAKE_MINUS_POINTS_AND_DISCARD_HAND) {//should discard entire hand
			for (int cardIndex=1;cardIndex<=players[playerNumber].getDraw();cardIndex++) {
				randomizeCard(cardIndex,playerNumber);
			}
		}
		else if (cardType==CardType.DECREASE_HAND_LIMIT){//since hand limit decreased, should not draw new card, only reposition cards
			if (cardNumber==1) {
				playerService.save(new Player(players[playerNumber].getName(),players[playerNumber].getScore(),players[playerNumber].getDraw(),players[playerNumber].getPlay(),players[playerNumber].getCard(players[playerNumber].getDraw()+1),players[playerNumber].getCard2(),players[playerNumber].getCard3(),players[playerNumber].getCard4(),players[playerNumber].getCard5(),players[playerNumber].getCard6(),players[playerNumber].getHasPlayed()));			
			}
			else if (cardNumber==2) {
				playerService.save(new Player(players[playerNumber].getName(),players[playerNumber].getScore(),players[playerNumber].getDraw(),players[playerNumber].getPlay(),players[playerNumber].getCard1(),players[playerNumber].getCard(players[playerNumber].getDraw()+1),players[playerNumber].getCard3(),players[playerNumber].getCard4(),players[playerNumber].getCard5(),players[playerNumber].getCard6(),players[playerNumber].getHasPlayed()));			
			}
			else if (cardNumber==3) {
				playerService.save(new Player(players[playerNumber].getName(),players[playerNumber].getScore(),players[playerNumber].getDraw(),players[playerNumber].getPlay(),players[playerNumber].getCard1(),players[playerNumber].getCard2(),players[playerNumber].getCard(players[playerNumber].getDraw()+1),players[playerNumber].getCard4(),players[playerNumber].getCard5(),players[playerNumber].getCard6(),players[playerNumber].getHasPlayed()));			
			}
			else if (cardNumber==4) {
				playerService.save(new Player(players[playerNumber].getName(),players[playerNumber].getScore(),players[playerNumber].getDraw(),players[playerNumber].getPlay(),players[playerNumber].getCard1(),players[playerNumber].getCard2(),players[playerNumber].getCard3(),players[playerNumber].getCard(players[playerNumber].getDraw()+1),players[playerNumber].getCard5(),players[playerNumber].getCard6(),players[playerNumber].getHasPlayed()));
			}
			else if (cardNumber==5) {
				playerService.save(new Player(players[playerNumber].getName(),players[playerNumber].getScore(),players[playerNumber].getDraw(),players[playerNumber].getPlay(),players[playerNumber].getCard1(),players[playerNumber].getCard2(),players[playerNumber].getCard3(),players[playerNumber].getCard4(),players[playerNumber].getCard(players[playerNumber].getDraw()+1),players[playerNumber].getCard6(),players[playerNumber].getHasPlayed()));			
			}
			if (playerNumber==0) {
				model.put("description" + cardNumber, cardInfoService.findById(players[playerNumber].getCard(players[playerNumber].getDraw()+1)).get().getDescription());
			}		
		}
   		else{
			randomizeCard(cardNumber, playerNumber);
		}
    	if (playerNumber==0 && players[playerNumber].getPlay()>1) {
    		for (cardNumber=1;cardNumber<=players[playerNumber].getDraw();cardNumber++) {
    			try {
	    			if (model.getAttribute("description"+cardNumber)==null) {
	    				randomizeCard(cardNumber, playerNumber);    				
	    			}
    			}
    			catch(NullPointerException e) {
    				randomizeCard(cardNumber, playerNumber);    				
    			}
    		}
    	}
	}

	public Player[] setPlayerArray() {
		System.out.println(nPlayers);
		players = new Player[nPlayers];
		for (int playerNumber=0; playerNumber<nPlayers; playerNumber++) {
			players[playerNumber] = (Player)playerService.findById("Player "+ playerNumber).get();
		}
		return players;
	}

	public int getnPlayers() {
		return nPlayers;
	}
}